info:
  title: Salcedonie API
  version: 1.0.0
servers:
  - url: 'https://api.salcedonie.nakasar.me'
  - url: 'http://localhost:5000'
openapi: 3.0.0
apis:
  - ./src/**/*.js
paths:
  /auth:
    post:
      operationId: auth
      summary: Auth endpoint to generate a token.
      description: Authenticate against username and password to retrieve an access token.
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
              example:
                username: John Smith
                password: Jo0hnPAs0rdN0tS3cur3
      responses:
        '200':
          description: User access token.
          content:
            application/json:
              schema:
                type: string
  /users:
    get:
      operationId: getUsers
      summary: Get existing users
      description: >-
        Get existing users summaries. Admin will retrieve full user objects,
        whereas application may only retrieve user id and discord_id.
      tags:
        - users
      parameters:
        - name: discord_id
          in: query
          description: search by exact match on discord_id
          schema:
            type: integer
            example: 11119836820
      security:
        - admin: []
        - application: []
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: createUser
      summary: Create a user
      description: Create a user
      tags:
        - users
      security:
        - admin: []
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created (see id in Location header)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  '/users/{userId}':
    post:
      operationId: updateUser
      summary: Update a user
      description: Update a user
      tags:
        - users
      security:
        - admin: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: Fields to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '204':
          description: User updated
  '/users/{userId}/default-character':
    get:
      operationId: getUserDefaultCharacter
      tags:
        - users
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Default character of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterDetails'
    post:
      operationId: updateUserDefaultCharacter
      tags:
        - users
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: Default character id to set as default
        content:
          application/json:
            schema:
              type: string
              example: 5c1c06cd8d93224570fcc65b
      responses:
        '200':
          description: Default character of user set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterDetails'
  /events:
    get:
      operationId: getEvents
      tags:
        - events
      security:
        - user: []
        - application: []
      responses:
        '200':
          description: List of events the user may access.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSummary'
    post:
      operationId: createEvent
      tags:
        - events
      security:
        - user: []
        - application: []
      requestBody:
        description: Event to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Event created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetails'
  '/events/{eventId}':
    get:
      operationId: Get event details and last infos.
      tags:
        - events
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/eventId'
      responses:
        '200':
          description: Event requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetails'
    patch:
      operationId: updateEvent
      tags:
        - events
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/eventId'
      requestBody:
        description: Event to update
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetails'
    delete:
      operationId: archiveEvent
      tags:
        - events
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/eventId'
      responses:
        '204':
          description: Event archived
  '/events/{eventId}/actions':
    get:
      operationId: Get last actions in event
      tags:
        - actions
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/eventId'
      responses:
        '200':
          description: List of actions of event.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionSummary'
    post:
      operationId: postAction
      tags:
        - actions
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/eventId'
      requestBody:
        description: Action to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionCreate'
      responses:
        '201':
          description: Created Action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDetails'
  '/events/{eventId}/actions/{actionId}':
    get:
      operationId: getAction
      tags:
        - actions
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/eventId'
        - $ref: '#/components/parameters/actionId'
      responses:
        '200':
          description: Requested Action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDetails'
    patch:
      operationId: updateAction
      tags:
        - actions
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/eventId'
        - $ref: '#/components/parameters/actionId'
      requestBody:
        description: Action to update
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated Action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDetails'
    delete:
      operationId: deleteAction
      tags:
        - actions
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/eventId'
        - $ref: '#/components/parameters/actionId'
      responses:
        '204':
          description: Action deleted
  /characters:
    get:
      operationId: Get characters
      tags:
        - characters
      security:
        - user: []
        - application: []
      responses:
        '200':
          description: List of characters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CharacterSummary'
    post:
      operationId: createCharacter
      tags:
        - characters
      security:
        - user: []
        - application: []
      requestBody:
        description: Character to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterCreate'
      responses:
        '201':
          description: Created character
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterDetails'
  '/characters/{characterId}':
    get:
      operationId: Get character details
      tags:
        - characters
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/characterId'
      responses:
        '200':
          description: Requested Character
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CharacterDetails'
    patch:
      operationId: updateCharacter
      tags:
        - characters
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/characterId'
      requestBody:
        description: Character to update
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated Character
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CharacterDetails'
  '/characters/{characterId}/actions':
    get:
      operationId: getCharacterActions
      tags:
        - actions
      security:
        - user: []
        - application: []
      parameters:
        - $ref: '#/components/parameters/characterId'
      responses:
        '200':
          description: List of actions of character.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionSummary'
  /actions:
    get:
      operationId: getActions
      tags:
        - actions
      security:
        - user: []
        - application: []
      responses:
        '200':
          description: List of actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionSummary'
components:
  securitySchemes:
    user:
      description: User Bearer token
      type: http
      scheme: bearer
      bearerFormat: JWT
    application:
      description: Application API key
      type: apiKey
      name: API_KEY
      in: header
    admin:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    EventSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        active:
          type: boolean
          description: Prevent user from posting actions if false.
        owner:
          type: string
          description: User that own the event.
      example:
        id: 5c1c06cd8d93224570fcc65b
        title: Prologue
        description: Le commencement de notre aventure !
        active: true
        owner: 5c1c06cd8d93224570fcc65b
    EventDetails:
      allOf:
        - $ref: '#/components/schemas/EventSummary'
        - type: object
          properties:
            text:
              type: string
          example:
            text: >-
              Voici un texte de description complet de l'évènement, avec
              éventuellement des intrusctions, etc.
    EventCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        text:
          type: string
        active:
          type: boolean
          description: Prevent user from posting actions if false.
        owner:
          type: string
          description: User that own sthe event. Default to bearer of the token.
      required:
        - title
        - description
      example:
        title: Prologue
        description: Le commencement de notre aventure !
        text: >-
          Voici un texte de description complet de l'évènement, avec
          éventuellement des intrusctions, etc.
        active: true
        owner: 5c1c06cd8d93224570fcc65b
    CharacterSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        owner:
          type: string
          description: User that owns the character.
      example:
        id: 5c1c06cd8d93224570fcc65b
        name: Henry Flore
        description: Le grand héros de tous les temps !
    CharacterDetails:
      allOf:
        - $ref: '#/components/schemas/CharacterSummary'
    CharacterCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        owner:
          type: string
          description: User that owns the character. Default to bearer of the token.
      required:
        - name
        - description
      example:
        name: Henry Flore
        description: Le grand héros de tous les temps !
        owner: 5c1c06cd8d93224570fcc65b
    ActionSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        event:
          type: string
        date:
          type: string
        time:
          type: string
        location:
          type: string
        description:
          type: string
        character:
          type: string
      example:
        id: 5c1c06cd8d93224570fcc65b
        title: Un verre au bar
        event: 5c1c06cd8d93224570fcc65b
        date: jour 12
        time: matin
        location: Au bar de Frid
        description: Henry s'empare d'un verre et le descend d'une traite.
        character: 5c1c06cd8d93224570fcc65b
    ActionDetails:
      allOf:
        - $ref: '#/components/schemas/CharacterSummary'
    ActionCreate:
      type: object
      properties:
        title:
          type: string
        date:
          type: string
        time:
          type: string
        location:
          type: string
        description:
          type: string
        character:
          type: string
          description: >-
            Character that execute the action, default to user default character
            if set.
      required:
        - title
        - date
        - time
        - location
        - description
      example:
        title: Un verre au bar
        event: 5c1c06cd8d93224570fcc65b
        date: jour 12
        time: matin
        location: Au bar de Frid
        description: Henry s'empare d'un verre et le descend d'une traite.
        character: 5c1c06cd8d93224570fcc65b
    UserCreate:
      type: object
      properties:
        username:
          type: string
        discord_id:
          type: string
        admin:
          type: boolean
      example:
        username: john Smith
        discord_id: 11119836820
        admin: false
    User:
      allOf:
        - $ref: '#/components/schemas/UserCreate'
        - type: object
          properties:
            id:
              type: string
          example:
            id: 5c1c06cd8d93224570fcc65b
  parameters:
    userId:
      name: userId
      in: path
      required: true
      description: User ID
      schema:
        type: string
        example: 5c1c06cd8d93224570fcc65b
    characterId:
      name: characterId
      in: path
      required: true
      description: Character ID
      schema:
        type: string
        example: 5c1c06cd8d93224570fcc65b
    eventId:
      name: eventId
      in: path
      required: true
      description: Event ID
      schema:
        type: string
        example: 5c1c06cd8d93224570fcc65b
    actionId:
      name: actionId
      in: path
      required: true
      description: Action ID
      schema:
        type: string
        example: 5c1c06cd8d93224570fcc65b
tags: []
